/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. BwyGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(BwyGrammar)
package dd;
import utils.*;
public class BwyGrammar/*@bgen(jjtree)*/implements BwyGrammarTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTBwyGrammarState jjtree = new JJTBwyGrammarState();

/*@egen*/  VariableNameGenerator namegivener=new VariableNameGenerator();
  public  static  QTTable mytable=new QTTable();
  public static SymTab mySymTab =new SymTab ();
  public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    BwyGrammar t=new BwyGrammar(System.in);
    try
    { 
      SimpleNode n = t.Start();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(BwyGrammar) 

 

 





/*
     \u60f3\u5403\u997a\u5b50\uff0c\u60f3\u5403\u706b\u9505\u3002
   2018.1.13
*/


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* OPERATORS */
{
  	<ASSIGN:"=">
  | <GT:">">
  | <LT:"<">
  | <EQ:"==">
  | <LE:"<=">
  | <GE:">=">
  | <NE:"!=">
  | <ADD:"++">
  | <MINUSD:"--">
  | <REM:"%">
  | <AND:"&&">
  | <OR:"||">
  | < PLUS: "+" >
  |	< MINUS: "-" >
  |	< MULTIPLY: "*" >
  |	< DIVIDE: "/" >
}
TOKEN:   /*KEY WORDS*/
{
	
<BOOLEAN:"boolean">
  |<CHAR:"char">
  |<BYTE:"byte">
  |<SHORT:"short">
  | <INT:"int">
  |<LONG:"long">
  |<FLOAT:"float">
  |<DOUBLE:"double">
  
  | <BREAK:"break">
  | <CASE:"case">
  | <CONST:"const">
  | <CONTINUE:"continue">
  | <_DEFAULT:"default">
  | <DO:"do">
  | <TYPEDEF:"typedef">
  | <ELSE:"else">
  | <FOR:"for">
  | <IF:"if">
  | <RETURN:"return">
  | <SWITCH:"switch">
  | <VOID:"void">
  | <WHILE:"while">
  | <MAIN:"main">
}

TOKEN:   /* others */
{
  <LC:"(">
  | <RC:")">
  | <LM:"[">
  | <RM:"]">
  | <LB:"{">
  | <RB:"}">
}




TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
    >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}


/* bwy part */



SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
     try {
/*@egen*/
     Program()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}


void Program() :
{/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
   try {
/*@egen*/
   <VOID > <MAIN > <LC > < RC >
    < LB >  (StatementBlock())*  < RB >
    < EOF >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
       System.out.print("\t\t\tAccepted \n");
       //
       //\u9884\u7559
    }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void StatementBlock() :
{/*@bgen(jjtree) StatementBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StatementBlock */
      try {
/*@egen*/
        
      statement()
    |

      < LB > 
      (
        StatementBlock()
      )*
     < RB >/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/

}


void  statement() :
{/*@bgen(jjtree) statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) statement */
   try {
/*@egen*/
   loopStatement() 
|  seqStatement()
|  conStatement()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}



void  loopStatement() :
{/*@bgen(jjtree) loopStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int tag=QTInfo.innerIdSeqen;
  
  int tag2;
 }
{/*@bgen(jjtree) loopStatement */
     try {
/*@egen*/
    
     < WHILE >
   < LC >  BoolStatement()
  {
    mytable.PullBack(QTInfo.innerIdSeqen-1,QTInfo.innerIdSeqen+1);
    tag2=QTInfo.innerIdSeqen;
     
  }
    < RC >
    StatementBlock()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        
     
       
       mytable.addQTInfo(new QTInfo("J","_","_",tag+1));
        //System.out.print(QTInfo.innerIdSeqen );
        mytable.PullBack(tag2,QTInfo.innerIdSeqen+1);
    }/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}


void  BoolStatement()  :
{/*@bgen(jjtree) BoolStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int tag;
}
{/*@bgen(jjtree) BoolStatement */
   try {
/*@egen*/
   BoolAndExpression()
  (
    { 
      tag=QTInfo.innerIdSeqen;
     // System.out.print("!"+QTInfo.innerIdSeqen );
       mytable.PullBack( tag ,tag+1);
    }
    < OR > BoolAndExpression() {
      mytable.get_sp(QTInfo.innerIdSeqen-1  ).result=Integer.toString( tag-1);
      tag=QTInfo.innerIdSeqen;
      }
  )*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void BoolAndExpression():
{/*@bgen(jjtree) BoolAndExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int tag;
}
{/*@bgen(jjtree) BoolAndExpression */
  try {
/*@egen*/
  (
      LOOKAHEAD(2)
    < LB > BoolStatement()< RB > 
    |ConExpression() 
  )
  (
    {
       tag=QTInfo.innerIdSeqen;
       // System.out.print("!"+QTInfo.innerIdSeqen );
      mytable.PullBack(QTInfo.innerIdSeqen-1,QTInfo.innerIdSeqen+1);
    }
    < AND >
    (
      LOOKAHEAD(2)
      < LB > BoolStatement()< RB >
      |ConExpression() 
    )
    {
    mytable.get_sp(QTInfo.innerIdSeqen).result=Integer.toString(tag);
      tag = QTInfo.innerIdSeqen;
         System.out.print("!"+QTInfo.innerIdSeqen );
    }
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void  conStatement() :
{/*@bgen(jjtree) conStatement */
   SimpleNode jjtn000 = new SimpleNode(JJTCONSTATEMENT);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   int tag1,tag2=0;
   int haselse=0;  
}
{/*@bgen(jjtree) conStatement */
    try {
/*@egen*/
    < IF >
    < LC >  BoolStatement()  < RC >
     {
         tag1=QTInfo.innerIdSeqen;
     mytable.PullBack(QTInfo.innerIdSeqen-1,QTInfo.innerIdSeqen+1);
        
     }
    StatementBlock()
     {
      
       
       
     
     }
    
  
     (
         LOOKAHEAD(2)
         < ELSE >
         {
              haselse=1;
              tag2=QTInfo.innerIdSeqen;
              System.out.println(QTInfo.innerIdSeqen);
              mytable.addQTInfo(new QTInfo("J","_","_",0));
             
         }
          StatementBlock()

           
           
     )?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
       if(haselse==0)
    mytable.PullBack(tag1,QTInfo.innerIdSeqen-1);
    
   else {
        
        mytable.PullBack(tag1 , QTInfo.innerIdSeqen+1);
        mytable.get_sp(tag2+1).result=Integer.toString(QTInfo.innerIdSeqen+1);
      
      }
      
     }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
    
}

void  ConExpression() :
{/*@bgen(jjtree) ConExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String fisrt=null,second=null;
  Token op=null;
  int tag;
}
{/*@bgen(jjtree) ConExpression */
      try {
/*@egen*/
      fisrt=Expression()
  (
     (
        op=">"
    |   op= "<"
    |   op=">="
    |   op="<="
    |  op= "=="
    |  op= "!="
    )
    
      second=Expression()      ) ?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
   
    {
    if(op==null) mytable.addQTInfo(new QTInfo("Jnz",fisrt,"_",QTInfo.innerIdSeqen+3));
    else mytable.addQTInfo(new QTInfo("J"+op.image,fisrt,second,QTInfo.innerIdSeqen+3));
    mytable.addQTInfo(new QTInfo("J","_","_",-1));
  }/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void  seqStatement() :
{/*@bgen(jjtree) seqStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) seqStatement */
   try {
/*@egen*/
   (
      decStatement()
   |  assStatement()
   ) ";"/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void decStatement() :
{/*@bgen(jjtree) decStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTDECSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token stype;
 Token sid;
  
 int demons=0;
 Token demon1=new Token();
 Token demon2=new Token();
 demon1.image="0";
 demon2.image="0";
}
{/*@bgen(jjtree) decStatement */
     try {
/*@egen*/
     stype= type()     
     sid=Identifier_dec()
     (  "[" demon1=Integer() "]" { demons ++;}
         
       (
         "["demon2=Integer()"]"{ demons ++;}
       ) ?  
     ) ?
       {
         if(demons!=0)
         { ArrayInfo arrinfo=new  ArrayInfo(stype.image, sid.image,
          "beginLine :"+ sid.beginLine+" beginColumn "+sid.beginColumn+" ",
          demons, Integer.parseInt(demon1.image)   ,   Integer.parseInt(demon2.image));
         demons=0;
         demon1.image="0";
         demon2.image="0";
              mySymTab.addArrInfo(arrinfo);
         }
         else {
            SymInfo syminfo=new  SymInfo(stype.image,sid.image,"beginLine :"+ sid.beginLine+" beginColumn "+sid.beginColumn+" ");
            mySymTab.addSymInfo(syminfo);
         }
       
             
       }
        
   (
    (
      ","
    )
    sid= Identifier_dec()
     (  "["demon1=Integer()"]" { demons ++;}
         
       (
         "["demon2=Integer()"]"{ demons ++;}
       ) ?  
     ) ?
     {
            if(demons!=0)
         { ArrayInfo arrinfo2=new  ArrayInfo(stype.image, sid.image,
          "beginLine :"+ sid.beginLine+" beginColumn "+sid.beginColumn+" ",
          demons, Integer.parseInt(demon1.image)   ,   Integer.parseInt(demon2.image));
         demons=0;
         demon1.image="0";
         demon2.image="0";
              mySymTab.addArrInfo(arrinfo2);
         }
         else {
            SymInfo syminfo2=new  SymInfo(stype.image,sid.image,"beginLine :"+ sid.beginLine+" beginColumn "+sid.beginColumn+" ");
            mySymTab.addSymInfo(syminfo2);
         }

        }
   )*/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/ 
}
void  assStatement() :
{/*@bgen(jjtree) assStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String  first;
  String second;
  Token tk;
}
{/*@bgen(jjtree) assStatement */
  try {
/*@egen*/
     
  first=  Identifier_ass()
  tk= < ASSIGN >
  second=  Expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
     if(first.indexOf("[")!=-1) {
    System.out.println("[]"+tk.image+" "+second+" "+"_"+" "+first);
     QTInfo qt=new QTInfo("[]"+tk.image,second,"_",first);
       mytable.addQTInfo(qt);  
        }
    else if(second.indexOf("[")!=-1) {
    System.out.println(tk.image+"[] "+second+" "+"_"+" "+first);
     QTInfo qt=new QTInfo( tk.image+"[]",second,"_",first);
       mytable.addQTInfo(qt);  
        }  
     else {
     System.out.println(tk.image+" "+second+" "+"_"+" "+first);
     QTInfo qt=new QTInfo(tk.image,second,"_",first);
       mytable.addQTInfo(qt);  
       }
    
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  
}
Token  Identifier_dec() :
{/*@bgen(jjtree) Identifier_dec */
 SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER_DEC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
}
{/*@bgen(jjtree) Identifier_dec */
  try {
/*@egen*/
  t= < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String Identifier_ass() :
{/*@bgen(jjtree) Identifier_ass */
 SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER_ASS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
 int demons=0;
 Token demon1=new Token();
 Token demon2=new Token();
 demon1.image="0";
 demon2.image="0";
}
{/*@bgen(jjtree) Identifier_ass */
  try {
/*@egen*/
  t= < IDENTIFIER >
     (  "[" demon1=Integer() "]" { demons ++;}
         
       (
         "["demon2=Integer()"]"{ demons ++;}
       ) ?  
     ) ?
  {
    
      if(demons!=0) {
    mySymTab.ArrUndefineCheck(t.image,"beginLine :"+ t.beginLine+" beginColumn "+t.beginColumn+" "
    ,demons, Integer.parseInt(demon1.image)   ,
    Integer.parseInt(demon2.image) );
        }
      else {
mySymTab.SymUndefineCheck(t.image,"beginLine :"+ t.beginLine+" beginColumn "+t.beginColumn+"  ");
        }
   
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
      if(demons!=0) {
     if(demons==1)
         return  t.image+"["+demon1.image+"]";
     if(demons==2)
         return  t.image+"["+demon1.image+"]"+"["+demon2.image+"]";
        }
      else {

        return  t.image;
        
         }
    
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token type() :
{/*@bgen(jjtree) type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t ;
}
{/*@bgen(jjtree) type */
  try {
/*@egen*/

  (
   t= < INT >
  |t= <FLOAT >
  |t= < BOOLEAN >
  |t=<CHAR>
  |t= <BYTE>
  |t= <SHORT>
  |t= <LONG>
  |t= <DOUBLE>
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  
   
  
  {
    return t ;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



/*default part */
 

String  Expression() :
{/*@bgen(jjtree) Expression */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String val;}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  val=  AdditiveExpression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
   return val;
 }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String AdditiveExpression() :
{/*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String first;
  String  second;
  Token tk;
  String temp;
}
{/*@bgen(jjtree) AdditiveExpression */
  try {
/*@egen*/
  first=MultiplicativeExpression()
  {
    temp=first;
  }
  (
    (
      tk="+"
    | tk= "-"
    )
   second= MultiplicativeExpression()
   {
     temp=VariableNameGenerator.genVariableName();
     System.out.println(tk.image+" "+first+" "+second+" "+temp);
      QTInfo qt=new QTInfo(tk.image,first,second,temp);
           mytable.addQTInfo(qt);
     first=temp;
   }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {

  return temp;
   
 }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String MultiplicativeExpression() :
{/*@bgen(jjtree) MultiplicativeExpression */
   SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token tk;
String first;
String second;
String temp;
 }
{/*@bgen(jjtree) MultiplicativeExpression */
   try {
/*@egen*/
   first=UnaryExpression()
   {
    temp=first;
  }
  (
    (
     tk= "*"
    |tk= "/"
    |tk= "%"
    )
    second= UnaryExpression()
    {
      temp=VariableNameGenerator.genVariableName();
      System.out.println(tk.image+" "+first+" "+second+" "+temp);

      QTInfo qt=new QTInfo(tk.image,first,second,temp);
           mytable.addQTInfo(qt);

      
      first=temp;
    }
  )*/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
    return temp;
  }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

String  UnaryExpression() :
{/*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String val=null;
  Token t=null ;
}
{/*@bgen(jjtree) UnaryExpression */
try {
/*@egen*/
(
   "(" val=Expression() ")"
| val= Identifier_ass()
| t= Integer()
)/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/  
{
    //System.out.println(val);
    if(val!=null)
    { return val;}
    return t.image;
    
}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}

void Identifier() :
{/*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  < IDENTIFIER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token Integer() :
{/*@bgen(jjtree) Integer */
 SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token val;}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  val=< INTEGER_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return val;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
