/* Generated By:JJTree&JavaCC: Do not edit this line. BwyGrammar.java */
package dd;
import utils.*;
public class BwyGrammar/*@bgen(jjtree)*/implements BwyGrammarTreeConstants, BwyGrammarConstants {/*@bgen(jjtree)*/
  protected JJTBwyGrammarState jjtree = new JJTBwyGrammarState();VariableNameGenerator namegivener=new VariableNameGenerator();
  public  static  QTTable mytable=new QTTable();
  public static SymTab mySymTab =new SymTab ();
  public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \u005c"1+(2+3)*var;\u005c" :");
    BwyGrammar t=new BwyGrammar(System.in);
    try
    {
      SimpleNode n = t.Start();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

/* bwy part */
  final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Program();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Program() throws ParseException {
 /*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(LC);
      jj_consume_token(RC);
      jj_consume_token(LB);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case BYTE:
        case SHORT:
        case INT:
        case LONG:
        case FLOAT:
        case DOUBLE:
        case IF:
        case WHILE:
        case LB:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        StatementBlock();
      }
      jj_consume_token(RB);
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
       System.out.print("\u005ct\u005ct\u005ctAccepted \u005cn");
       //
       //нц┴З

    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void StatementBlock() throws ParseException {
 /*@bgen(jjtree) StatementBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case BYTE:
      case SHORT:
      case INT:
      case LONG:
      case FLOAT:
      case DOUBLE:
      case IF:
      case WHILE:
      case IDENTIFIER:
        statement();
        break;
      case LB:
        jj_consume_token(LB);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case CHAR:
          case BYTE:
          case SHORT:
          case INT:
          case LONG:
          case FLOAT:
          case DOUBLE:
          case IF:
          case WHILE:
          case LB:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          StatementBlock();
        }
        jj_consume_token(RB);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

  final public void statement() throws ParseException {
 /*@bgen(jjtree) statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        loopStatement();
        break;
      case BOOLEAN:
      case CHAR:
      case BYTE:
      case SHORT:
      case INT:
      case LONG:
      case FLOAT:
      case DOUBLE:
      case IDENTIFIER:
        seqStatement();
        break;
      case IF:
        conStatement();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void loopStatement() throws ParseException {
 /*@bgen(jjtree) loopStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int tag=QTInfo.innerIdSeqen;

  int tag2;
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LC);
      BoolStatement();
    mytable.PullBack(QTInfo.innerIdSeqen-1,QTInfo.innerIdSeqen+1);
    tag2=QTInfo.innerIdSeqen;
      jj_consume_token(RC);
      StatementBlock();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
       mytable.addQTInfo(new QTInfo("J","_","_",tag+1));
        //System.out.print(QTInfo.innerIdSeqen );
        mytable.PullBack(tag2,QTInfo.innerIdSeqen+1);
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  final public void BoolStatement() throws ParseException {
 /*@bgen(jjtree) BoolStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int tag;
    try {
      BoolAndExpression();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
      tag=QTInfo.innerIdSeqen;
     // System.out.print("!"+QTInfo.innerIdSeqen );
       mytable.PullBack( tag ,tag+1);
        jj_consume_token(OR);
        BoolAndExpression();
      mytable.get_sp(QTInfo.innerIdSeqen-1  ).result=Integer.toString( tag-1);
      tag=QTInfo.innerIdSeqen;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void BoolAndExpression() throws ParseException {
 /*@bgen(jjtree) BoolAndExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int tag;
    try {
      if (jj_2_1(2)) {
        jj_consume_token(LB);
        BoolStatement();
        jj_consume_token(RB);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LC:
        case INTEGER_LITERAL:
        case IDENTIFIER:
          ConExpression();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
       tag=QTInfo.innerIdSeqen;
       // System.out.print("!"+QTInfo.innerIdSeqen );
      mytable.PullBack(QTInfo.innerIdSeqen-1,QTInfo.innerIdSeqen+1);
        jj_consume_token(AND);
        if (jj_2_2(2)) {
          jj_consume_token(LB);
          BoolStatement();
          jj_consume_token(RB);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LC:
          case INTEGER_LITERAL:
          case IDENTIFIER:
            ConExpression();
            break;
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
    mytable.get_sp(QTInfo.innerIdSeqen).result=Integer.toString(tag);
      tag = QTInfo.innerIdSeqen;
         System.out.print("!"+QTInfo.innerIdSeqen );
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void conStatement() throws ParseException {
 /*@bgen(jjtree) conStatement */
   SimpleNode jjtn000 = new SimpleNode(JJTCONSTATEMENT);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);int tag1,tag2=0;
   int haselse=0;
    try {
      jj_consume_token(IF);
      jj_consume_token(LC);
      BoolStatement();
      jj_consume_token(RC);
         tag1=QTInfo.innerIdSeqen;
     mytable.PullBack(QTInfo.innerIdSeqen-1,QTInfo.innerIdSeqen+1);
      StatementBlock();

      if (jj_2_3(2)) {
        jj_consume_token(ELSE);
              haselse=1;
              tag2=QTInfo.innerIdSeqen;
              System.out.println(QTInfo.innerIdSeqen);
              mytable.addQTInfo(new QTInfo("J","_","_",0));
        StatementBlock();
      } else {
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
       if(haselse==0)
    mytable.PullBack(tag1,QTInfo.innerIdSeqen-1);

   else {

        mytable.PullBack(tag1 , QTInfo.innerIdSeqen+1);
        mytable.get_sp(tag2+1).result=Integer.toString(QTInfo.innerIdSeqen+1);

      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ConExpression() throws ParseException {
 /*@bgen(jjtree) ConExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String fisrt=null,second=null;
  Token op=null;
  int tag;
    try {
      fisrt = Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case EQ:
      case LE:
      case GE:
      case NE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
          op = jj_consume_token(GT);
          break;
        case LT:
          op = jj_consume_token(LT);
          break;
        case GE:
          op = jj_consume_token(GE);
          break;
        case LE:
          op = jj_consume_token(LE);
          break;
        case EQ:
          op = jj_consume_token(EQ);
          break;
        case NE:
          op = jj_consume_token(NE);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        second = Expression();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    if(op==null) mytable.addQTInfo(new QTInfo("Jnz",fisrt,"_",QTInfo.innerIdSeqen+3));
    else mytable.addQTInfo(new QTInfo("J"+op.image,fisrt,second,QTInfo.innerIdSeqen+3));
    mytable.addQTInfo(new QTInfo("J","_","_",-1));
    } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

  final public void seqStatement() throws ParseException {
 /*@bgen(jjtree) seqStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case BYTE:
      case SHORT:
      case INT:
      case LONG:
      case FLOAT:
      case DOUBLE:
        decStatement();
        break;
      case IDENTIFIER:
        assStatement();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(59);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void decStatement() throws ParseException {
 /*@bgen(jjtree) decStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTDECSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token stype;
 Token sid;

 int demons=0;
 Token demon1=new Token();
 Token demon2=new Token();
 demon1.image="0";
 demon2.image="0";
    try {
      stype = type();
      sid = Identifier_dec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LM:
        jj_consume_token(LM);
        demon1 = Integer();
        jj_consume_token(RM);
                                   demons ++;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LM:
          jj_consume_token(LM);
          demon2 = Integer();
          jj_consume_token(RM);
                                 demons ++;
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
         if(demons!=0)
         { ArrayInfo arrinfo=new  ArrayInfo(stype.image, sid.image,
          "beginLine :"+ sid.beginLine+" beginColumn "+sid.beginColumn+" ",
          demons, Integer.parseInt(demon1.image)   ,   Integer.parseInt(demon2.image));
         demons=0;
         demon1.image="0";
         demon2.image="0";
              mySymTab.addArrInfo(arrinfo);
         }
         else {
            SymInfo syminfo=new  SymInfo(stype.image,sid.image,"beginLine :"+ sid.beginLine+" beginColumn "+sid.beginColumn+" ");
            mySymTab.addSymInfo(syminfo);
         }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 60:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        jj_consume_token(60);
        sid = Identifier_dec();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LM:
          jj_consume_token(LM);
          demon1 = Integer();
          jj_consume_token(RM);
                                 demons ++;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LM:
            jj_consume_token(LM);
            demon2 = Integer();
            jj_consume_token(RM);
                                 demons ++;
            break;
          default:
            jj_la1[14] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
            if(demons!=0)
         { ArrayInfo arrinfo2=new  ArrayInfo(stype.image, sid.image,
          "beginLine :"+ sid.beginLine+" beginColumn "+sid.beginColumn+" ",
          demons, Integer.parseInt(demon1.image)   ,   Integer.parseInt(demon2.image));
         demons=0;
         demon1.image="0";
         demon2.image="0";
              mySymTab.addArrInfo(arrinfo2);
         }
         else {
            SymInfo syminfo2=new  SymInfo(stype.image,sid.image,"beginLine :"+ sid.beginLine+" beginColumn "+sid.beginColumn+" ");
            mySymTab.addSymInfo(syminfo2);
         }
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  final public void assStatement() throws ParseException {
 /*@bgen(jjtree) assStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String  first;
  String second;
  Token tk;
    try {
      first = Identifier_ass();
      tk = jj_consume_token(ASSIGN);
      second = Expression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
     if(first.indexOf("[")!=-1) {
    System.out.println("[]"+tk.image+" "+second+" "+"_"+" "+first);
     QTInfo qt=new QTInfo("[]"+tk.image,second,"_",first);
       mytable.addQTInfo(qt);
        }
    else if(second.indexOf("[")!=-1) {
    System.out.println(tk.image+"[] "+second+" "+"_"+" "+first);
     QTInfo qt=new QTInfo( tk.image+"[]",second,"_",first);
       mytable.addQTInfo(qt);
        }
     else {
     System.out.println(tk.image+" "+second+" "+"_"+" "+first);
     QTInfo qt=new QTInfo(tk.image,second,"_",first);
       mytable.addQTInfo(qt);
       }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public Token Identifier_dec() throws ParseException {
 /*@bgen(jjtree) Identifier_dec */
 SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER_DEC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Identifier_ass() throws ParseException {
 /*@bgen(jjtree) Identifier_ass */
 SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER_ASS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
 int demons=0;
 Token demon1=new Token();
 Token demon2=new Token();
 demon1.image="0";
 demon2.image="0";
    try {
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LM:
        jj_consume_token(LM);
        demon1 = Integer();
        jj_consume_token(RM);
                                   demons ++;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LM:
          jj_consume_token(LM);
          demon2 = Integer();
          jj_consume_token(RM);
                                 demons ++;
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      if(demons!=0) {
    mySymTab.ArrUndefineCheck(t.image,"beginLine :"+ t.beginLine+" beginColumn "+t.beginColumn+" "
    ,demons, Integer.parseInt(demon1.image)   ,
    Integer.parseInt(demon2.image) );
        }
      else {
mySymTab.SymUndefineCheck(t.image,"beginLine :"+ t.beginLine+" beginColumn "+t.beginColumn+"  ");
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
      if(demons!=0) {
     if(demons==1)
         {if (true) return  t.image+"["+demon1.image+"]";}
     if(demons==2)
         {if (true) return  t.image+"["+demon1.image+"]"+"["+demon2.image+"]";}
        }
      else {

        {if (true) return  t.image;}

         }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Token type() throws ParseException {
 /*@bgen(jjtree) type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        t = jj_consume_token(INT);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
        break;
      case CHAR:
        t = jj_consume_token(CHAR);
        break;
      case BYTE:
        t = jj_consume_token(BYTE);
        break;
      case SHORT:
        t = jj_consume_token(SHORT);
        break;
      case LONG:
        t = jj_consume_token(LONG);
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t ;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/*default part */
  final public String Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String val;
    try {
      val = AdditiveExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return val;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String AdditiveExpression() throws ParseException {
 /*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String first;
  String  second;
  Token tk;
  String temp;
    try {
      first = MultiplicativeExpression();
    temp=first;
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          tk = jj_consume_token(PLUS);
          break;
        case MINUS:
          tk = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        second = MultiplicativeExpression();
     temp=VariableNameGenerator.genVariableName();
     System.out.println(tk.image+" "+first+" "+second+" "+temp);
      QTInfo qt=new QTInfo(tk.image,first,second,temp);
           mytable.addQTInfo(qt);
     first=temp;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  {if (true) return temp;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String MultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) MultiplicativeExpression */
   SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);Token tk;
String first;
String second;
String temp;
    try {
      first = UnaryExpression();
    temp=first;
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REM:
        case MULTIPLY:
        case DIVIDE:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          tk = jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          tk = jj_consume_token(DIVIDE);
          break;
        case REM:
          tk = jj_consume_token(REM);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        second = UnaryExpression();
      temp=VariableNameGenerator.genVariableName();
      System.out.println(tk.image+" "+first+" "+second+" "+temp);

      QTInfo qt=new QTInfo(tk.image,first,second,temp);
           mytable.addQTInfo(qt);


      first=temp;
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    {if (true) return temp;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public String UnaryExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String val=null;
  Token t=null ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LC:
        jj_consume_token(LC);
        val = Expression();
        jj_consume_token(RC);
        break;
      case IDENTIFIER:
        val = Identifier_ass();
        break;
      case INTEGER_LITERAL:
        t = Integer();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
    //System.out.println(val);
    if(val!=null)
    { {if (true) return val;}}
    {if (true) return t.image;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public Token Integer() throws ParseException {
 /*@bgen(jjtree) Integer */
 SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token val;
    try {
      val = jj_consume_token(INTEGER_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return val;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_25() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(LB)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(LB)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(LC)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(LB)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public BwyGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7f800000,0x7f800000,0x7f800000,0x7f800000,0x40000,0x0,0x20000,0x0,0x3f00,0x3f00,0x7f800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f800000,0x180000,0x180000,0x610000,0x610000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1041100,0x1041100,0x1041100,0x1001100,0x0,0x1104000,0x0,0x1104000,0x0,0x0,0x1000000,0x10000,0x10000,0x10000000,0x10000,0x10000,0x10000,0x10000,0x0,0x0,0x0,0x0,0x0,0x1104000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public BwyGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BwyGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BwyGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public BwyGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BwyGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public BwyGrammar(BwyGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(BwyGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
